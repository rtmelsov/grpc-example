// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/example.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamMultiService_MultiResponse_FullMethodName = "/demo.StreamMultiService/MultiResponse"
)

// StreamMultiServiceClient is the client API for StreamMultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMultiServiceClient interface {
	MultiResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
}

type streamMultiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMultiServiceClient(cc grpc.ClientConnInterface) StreamMultiServiceClient {
	return &streamMultiServiceClient{cc}
}

func (c *streamMultiServiceClient) MultiResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamMultiService_ServiceDesc.Streams[0], StreamMultiService_MultiResponse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMultiService_MultiResponseClient = grpc.ServerStreamingClient[Response]

// StreamMultiServiceServer is the server API for StreamMultiService service.
// All implementations must embed UnimplementedStreamMultiServiceServer
// for forward compatibility.
type StreamMultiServiceServer interface {
	MultiResponse(*Request, grpc.ServerStreamingServer[Response]) error
	mustEmbedUnimplementedStreamMultiServiceServer()
}

// UnimplementedStreamMultiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamMultiServiceServer struct{}

func (UnimplementedStreamMultiServiceServer) MultiResponse(*Request, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method MultiResponse not implemented")
}
func (UnimplementedStreamMultiServiceServer) mustEmbedUnimplementedStreamMultiServiceServer() {}
func (UnimplementedStreamMultiServiceServer) testEmbeddedByValue()                            {}

// UnsafeStreamMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMultiServiceServer will
// result in compilation errors.
type UnsafeStreamMultiServiceServer interface {
	mustEmbedUnimplementedStreamMultiServiceServer()
}

func RegisterStreamMultiServiceServer(s grpc.ServiceRegistrar, srv StreamMultiServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamMultiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamMultiService_ServiceDesc, srv)
}

func _StreamMultiService_MultiResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMultiServiceServer).MultiResponse(m, &grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMultiService_MultiResponseServer = grpc.ServerStreamingServer[Response]

// StreamMultiService_ServiceDesc is the grpc.ServiceDesc for StreamMultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.StreamMultiService",
	HandlerType: (*StreamMultiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiResponse",
			Handler:       _StreamMultiService_MultiResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/example.proto",
}
